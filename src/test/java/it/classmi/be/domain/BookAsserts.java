package it.classmi.be.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BookAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAllPropertiesEquals(Book expected, Book actual) {
        assertBookAutoGeneratedPropertiesEquals(expected, actual);
        assertBookAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAllUpdatablePropertiesEquals(Book expected, Book actual) {
        assertBookUpdatableFieldsEquals(expected, actual);
        assertBookUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookAutoGeneratedPropertiesEquals(Book expected, Book actual) {
        assertThat(actual)
            .as("Verify Book auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookUpdatableFieldsEquals(Book expected, Book actual) {
        assertThat(actual)
            .as("Verify Book relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getTitleSearch()).as("check titleSearch").isEqualTo(expected.getTitleSearch()))
            .satisfies(a -> assertThat(a.getIsbn()).as("check isbn").isEqualTo(expected.getIsbn()))
            .satisfies(a -> assertThat(a.getPublisher()).as("check publisher").isEqualTo(expected.getPublisher()))
            .satisfies(a -> assertThat(a.getPublishedYear()).as("check publishedYear").isEqualTo(expected.getPublishedYear()))
            .satisfies(a -> assertThat(a.getIsVerified()).as("check isVerified").isEqualTo(expected.getIsVerified()))
            .satisfies(a -> assertThat(a.getVerifyUrl()).as("check verifyUrl").isEqualTo(expected.getVerifyUrl()))
            .satisfies(a -> assertThat(a.getViewAuthors()).as("check viewAuthors").isEqualTo(expected.getViewAuthors()))
            .satisfies(a -> assertThat(a.getFrontImageLink()).as("check frontImageLink").isEqualTo(expected.getFrontImageLink()))
            .satisfies(a -> assertThat(a.getBackImageLink()).as("check backImageLink").isEqualTo(expected.getBackImageLink()))
            .satisfies(a -> assertThat(a.getPagesNumber()).as("check pagesNumber").isEqualTo(expected.getPagesNumber()))
            .satisfies(a -> assertThat(a.getLanguage()).as("check language").isEqualTo(expected.getLanguage()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookUpdatableRelationshipsEquals(Book expected, Book actual) {
        assertThat(actual)
            .as("Verify Book relationships")
            .satisfies(a -> assertThat(a.getAuthors()).as("check authors").isEqualTo(expected.getAuthors()));
    }
}
