package it.classmi.be.domain;

import static it.classmi.be.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BookSellAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookSellAllPropertiesEquals(BookSell expected, BookSell actual) {
        assertBookSellAutoGeneratedPropertiesEquals(expected, actual);
        assertBookSellAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookSellAllUpdatablePropertiesEquals(BookSell expected, BookSell actual) {
        assertBookSellUpdatableFieldsEquals(expected, actual);
        assertBookSellUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookSellAutoGeneratedPropertiesEquals(BookSell expected, BookSell actual) {
        assertThat(actual)
            .as("Verify BookSell auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookSellUpdatableFieldsEquals(BookSell expected, BookSell actual) {
        assertThat(actual)
            .as("Verify BookSell relevant properties")
            .satisfies(a -> assertThat(a.getUsername()).as("check username").isEqualTo(expected.getUsername()))
            .satisfies(a -> assertThat(a.getDate()).as("check date").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getDate())
            )
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getBookState()).as("check bookState").isEqualTo(expected.getBookState()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getNote()).as("check note").isEqualTo(expected.getNote()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(expected.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookSellUpdatableRelationshipsEquals(BookSell expected, BookSell actual) {
        assertThat(actual)
            .as("Verify BookSell relationships")
            .satisfies(a -> assertThat(a.getBook()).as("check book").isEqualTo(expected.getBook()));
    }
}
